{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\react-flights\\\\src\\\\components\\\\pages\\\\Administrator\\\\AdminPages\\\\ActionsOnCustomer.js\";\nimport React, { Component } from 'react';\nimport { Container, Button } from 'react-bootstrap';\nimport CustomerList from './CustomerList';\nimport AddCustomer from './AddCustomer';\nimport axios from 'axios';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Swal from \"sweetalert2\";\nimport { history } from '../../../../history';\nimport { logout } from '../../../../actions/user.actions';\nimport '../../../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BaseUrl } from '../../../../constants/BaseUrl';\n\nclass ActionsOnCustomer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.editCustomer = customerId => {\n      let token = localStorage.getItem('admin');\n      axios.post(BaseUrl.url + `/api/AdministratorFacade/getCustomerById`, {\n        id: customerId\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(result => {\n        this.setState({\n          isEditCustomer: true,\n          isAddCustomer: false,\n          customerData: result.data\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n\n        if (error.message === 'Request failed with status code 401') {\n          this.props.logout();\n          Swal.fire({\n            icon: 'warning',\n            title: \"Oops..\",\n            type: \"error\",\n            text: \"Your token expires, please re-login!\"\n          });\n          history.push('/');\n        }\n      });\n    };\n\n    this.state = {\n      isAddCustomer: true,\n      error: null,\n      response: {},\n      customerData: {},\n      isEditCustomer: false\n    };\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onFormSubmit(data) {\n    let token = localStorage.getItem('admin');\n\n    if (this.state.isEditCustomer) {\n      axios.put(BaseUrl.url + '/api/AdministratorFacade/updatecustomer', data, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(result => {\n        let cdata = JSON.parse(result.config.data);\n\n        if (result.data === `Customer with ID = ${cdata.ID} updated succsesfully`) {\n          Swal.fire({\n            position: 'center',\n            icon: 'success',\n            title: result.data,\n            showConfirmButton: true\n          });\n        } else {\n          Swal.fire({\n            icon: 'warning',\n            title: \"Oops..\",\n            text: result.data\n          });\n        }\n\n        this.setState({\n          response: result,\n          isAddCustomer: true,\n          isEditCustomer: false\n        });\n      });\n    } else {\n      axios.post(BaseUrl.url + '/api/AdministratorFacade/createcustomer', data, {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(result => {\n        if (result.data === 'Customer account created succsesfully') {\n          Swal.fire({\n            position: 'center',\n            icon: 'success',\n            title: result.data,\n            showConfirmButton: true\n          });\n        } else {\n          Swal.fire({\n            icon: 'warning',\n            title: \"Oops..\",\n            type: \"error\",\n            text: result.data\n          });\n        }\n\n        this.setState({\n          response: result,\n          isAddCustomer: true,\n          isEditCustomer: false\n        });\n      });\n    }\n  }\n\n  onCreate() {\n    this.setState({\n      isAddCustomer: false\n    });\n    this.setState({\n      isEditCustomer: false\n    });\n    this.setState({\n      customerData: {}\n    });\n  }\n\n  onDetails(view) {\n    if (view === 'ListView') this.setState({\n      isAddCustomer: true\n    });\n    this.setState({\n      isEditCustomer: false\n    });\n  }\n\n  render() {\n    let customerForm;\n\n    if (!this.state.isAddCustomer || this.state.isEditCustomer) {\n      customerForm = React.createElement(AddCustomer, {\n        onFormSubmit: this.onFormSubmit,\n        customer: this.state.customerData,\n        ListView: this.onDetails.bind(this, 'ListView'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"CRUD operation on customer\"), this.state.isAddCustomer && React.createElement(Button, {\n      className: \"addBtn\",\n      variant: \"primary\",\n      style: {\n        borderRadius: 0\n      },\n      onClick: () => this.onCreate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Add Customer\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.state.isAddCustomer && React.createElement(CustomerList, {\n      editCustomer: this.editCustomer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), customerForm));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    logout: bindActionCreators(logout, dispatch)\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(ActionsOnCustomer);","map":{"version":3,"sources":["C:/Projects/react-flights/src/components/pages/Administrator/AdminPages/ActionsOnCustomer.js"],"names":["React","Component","Container","Button","CustomerList","AddCustomer","axios","bindActionCreators","connect","Swal","history","logout","BaseUrl","ActionsOnCustomer","constructor","props","editCustomer","customerId","token","localStorage","getItem","post","url","id","headers","then","result","setState","isEditCustomer","isAddCustomer","customerData","data","error","message","fire","icon","title","type","text","push","state","response","onFormSubmit","bind","put","cdata","JSON","parse","config","ID","position","showConfirmButton","onCreate","onDetails","view","render","customerForm","textAlign","borderRadius","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport CustomerList from './CustomerList'\r\nimport AddCustomer from './AddCustomer';\r\nimport axios from 'axios';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux';\r\nimport Swal from \"sweetalert2\";\r\nimport { history } from '../../../../history';\r\nimport { logout } from '../../../../actions/user.actions';\r\nimport '../../../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { BaseUrl } from '../../../../constants/BaseUrl'\r\n\r\nclass ActionsOnCustomer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isAddCustomer: true,\r\n      error: null,\r\n      response: {},\r\n      customerData: {},\r\n      isEditCustomer: false,\r\n    }\r\n\r\n    this.onFormSubmit = this.onFormSubmit.bind(this);\r\n\r\n  }\r\n\r\n  onFormSubmit(data) {\r\n\r\n    let token = localStorage.getItem('admin');\r\n\r\n    if (this.state.isEditCustomer) {\r\n      axios.put(BaseUrl.url + '/api/AdministratorFacade/updatecustomer', data, { headers: { 'Authorization': 'Bearer ' + token } })\r\n        .then(result => {\r\n          let cdata = JSON.parse(result.config.data)\r\n          if (result.data === `Customer with ID = ${cdata.ID} updated succsesfully`) {\r\n            Swal.fire({\r\n              position: 'center',\r\n              icon: 'success',\r\n              title: result.data,\r\n              showConfirmButton: true\r\n            });\r\n          }\r\n          else {\r\n            Swal.fire({\r\n              icon: 'warning',\r\n              title: \"Oops..\",\r\n              text: result.data\r\n            });\r\n          }\r\n          this.setState({\r\n            response: result,\r\n            isAddCustomer: true,\r\n            isEditCustomer: false\r\n          })\r\n        });\r\n    } else {\r\n\r\n      axios.post(BaseUrl.url + '/api/AdministratorFacade/createcustomer', data, { headers: { 'Authorization': 'Bearer ' + token } })\r\n        .then(result => {\r\n          if (result.data === 'Customer account created succsesfully') {\r\n            Swal.fire({\r\n              position: 'center',\r\n              icon: 'success',\r\n              title: result.data,\r\n              showConfirmButton: true\r\n            });\r\n          }\r\n          else {\r\n            Swal.fire({\r\n              icon: 'warning',\r\n              title: \"Oops..\",\r\n              type: \"error\",\r\n              text: result.data\r\n            });\r\n          }\r\n          this.setState({\r\n            response: result,\r\n            isAddCustomer: true,\r\n            isEditCustomer: false\r\n          })\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  editCustomer = customerId => {\r\n\r\n    let token = localStorage.getItem('admin');\r\n    axios.post(BaseUrl.url + `/api/AdministratorFacade/getCustomerById`, { id: customerId }, { headers: { 'Authorization': 'Bearer ' + token } })\r\n      .then((result) => {\r\n        this.setState({\r\n          isEditCustomer: true,\r\n          isAddCustomer: false,\r\n          customerData: result.data\r\n        });\r\n      },\r\n        (error) => {\r\n          this.setState({ error });\r\n          if (error.message === 'Request failed with status code 401') {\r\n            this.props.logout();\r\n            Swal.fire({\r\n              icon: 'warning',\r\n              title: \"Oops..\",\r\n              type: \"error\",\r\n              text: \"Your token expires, please re-login!\",\r\n            });\r\n            history.push('/');\r\n          }\r\n        }\r\n      )\r\n  }\r\n\r\n  onCreate() {\r\n    this.setState({ isAddCustomer: false });\r\n    this.setState({ isEditCustomer: false });\r\n    this.setState({ customerData: {} });\r\n  }\r\n  onDetails(view) {\r\n    if (view === 'ListView')\r\n      this.setState({ isAddCustomer: true });\r\n    this.setState({ isEditCustomer: false });\r\n\r\n  }\r\n\r\n  render() {\r\n    let customerForm;\r\n    if (!this.state.isAddCustomer || this.state.isEditCustomer) {\r\n\r\n      customerForm = <AddCustomer onFormSubmit={this.onFormSubmit} customer={this.state.customerData} ListView={this.onDetails.bind(this, 'ListView')} />\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"content1\">\r\n        <Container>\r\n          <h1 style={{ textAlign: 'center' }}>CRUD operation on customer</h1>\r\n          {/* <hr></hr> */}\r\n          {this.state.isAddCustomer && <Button className=\"addBtn\" variant=\"primary\" style={{ borderRadius: 0 }} onClick={() => this.onCreate()}>Add Customer</Button>}\r\n          <br></br>\r\n          {this.state.isAddCustomer && <CustomerList editCustomer={this.editCustomer} />}\r\n          {customerForm}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    logout: bindActionCreators(logout, dispatch),\r\n  }\r\n}\r\nexport default connect(null, mapDispatchToProps)(ActionsOnCustomer);\r\n"]},"metadata":{},"sourceType":"module"}